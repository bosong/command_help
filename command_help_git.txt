########git常用命令################################################

###Create a new repository o#######################
touch README.md //创建一个文件。文件名叫：README.md;

git init
git add README.md    //这里是添加README这个文件；
git commit -m "first commit"
git remote add origin https://github.com/songbo/test.git
git push -u origin master

###Push an existing repository #####################

git remote add origin https://github.com/songbo/test.git
git push -u origin master


###git branch常用命令################################

//1.1查看远程分支
$ git branch -a  
* br-2.1.2.2   分支1
  master       主分支
  test          分支2
前面带*号的代表你当前工作目录所处的分支
//1.2查看本地分支
$ git branch  

//1.3创建分支
$ git branch branchname  

//1.4本地创建并切换到新分支  如果有就切换 没哟就创建
$ git checkout -b branchname  

//1.5推送分支 到远程 
$ git push origin branchname  

//1.6删除本地test分支  
$ git br -d test  or git branch -d test  

//1.7 删除远程分支 两种方法
删除远程分支  
$ git branch -r -d origin/branch-name  
$ git push origin :branch-name  


###git tag   常用命令##############################

//2.1查看tag
git tag -l //本地 
git tag -a //远程
//2.2创建tag
git tag -a 0.0.1 -m "注释"  

//2.3 tag推送到远程
git push origin 0.0.1  
//推送所有tags
git push origin --tags

//2.4删除本地tag
git tag -d 0.0.1  

//2.5删除远程tag
git push origin :0.0.1   

//也可以这样  
git push origin --delete tag 0.0.1  
  

7 ###git reset 回滚与撤销 变基 常用命令##############################$ 


git commit --amend
重做上一次commit，并包括指定文件的新变化。
合并缓存区的修改和最近的一次commit，并尝试重新commit。可以理解为，用一个全新的commit整个替换了最近一次commit。
如果缓存区没有内容, 可以用来编辑上一次的commit描述。
不要对一个公共的commit使用amend。如果amend了一个被其他开发者使用的commit, 可能会严重影响其他开发者。

git checkout
git checkout -- <file>  # 丢弃工作区的修改
git reset HEAD <file>  # 撤销暂存区的修改，重新放回工作区
git rebase
重新定义分支的起点，也就是将当前分支从一个commit移动到另一个commit作为起点。
分支上的老commit将被删除,保持了项目历史的干净。建议不要在一个公共的分支中使用rebase。

git rebase <base>   # 将<base>做为当前分支的新起点, <base>可以是任何一种commit引用（如ID,branch name,tag,HEAD~N等）。
git rebase -i <base>    # 交互式地将<base>做为当前分支的新起点，过程中可以对要rebase的commit做一定的修改。
git reset
用来撤销本地的修改。建议不要reset一个公共的项目历史。

git reset  # 回退版本库到上一个commit的状态, 工作区不变。
git reset <commit>  # 回退版本库到指定的<commit>,  工作区不变。
git reset --hard  # 回退版本库和工作区到上一次commit的状态。 --hard表明覆盖所有的修改,  而且是不可逆的, 因此使用之前要谨慎。
git reset --hard <commit>  # 回退版本库和工作区到指定的<commit>。
回退到上个版本：git reset --hard HEAD^ git reset --hard HEAD~
回退到上上个版本：git reset --hard HEAD^^ git reset --hard HEAD~1
以此类推。
